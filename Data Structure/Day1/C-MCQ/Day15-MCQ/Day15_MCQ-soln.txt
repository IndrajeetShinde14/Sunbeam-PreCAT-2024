//**********************************************************************
/*
#include<stdio.h>
#include<stdlib.h>
int main( void )
{
int *sum = (int *)malloc(sizeof(int));
sum = NULL;
free(sum);
return 0;
}
*/
/*

A. Compliation Error
B. Error free
C. Memory Leakage
D. dangling pointer
E. No output
Answer : C

Explaination :
int *sum = (int *)malloc(sizeof(int));

sum pointer is base  address of 4 bytes allocated from heap section
We have assigned sum = NULL;

sum = NULL;
now sum is assigned to null now problem over here is we need to free
the memory before assigning it to null so there is a 4 bytes memory leakage
here

before making it null code should be
free(sum);
sum = NULL


*/

//**********************************************************************

/*
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main(void)
{
char *ptr=NULL;
ptr = (char *)calloc(1,10);
//calloc allocates 10 bytes dynamically on heap section default value is 0
strcpy(ptr, "Sunbeam");
//"Sunbeam" string is copied in dynamically allocated memory

ptr = (char *)realloc(ptr,20);
//realloc will resize the memory from 10 to 20

strcat(ptr," IT PARK");
//strcat is used for string concatination
//" IT Park" will concatenated after string "Sunbeam"

// so final representation will be

//stack                      Heap section
// ptr   ==============> Sunbeam IT PARK

printf("%c",(ptr[0]>=65 && ptr[0]<=90) ?
 ptr[strlen(ptr)-1]+32 : ptr[strlen(ptr)-14]-32);

//ptr   ==============> Sunbeam IT PARK

// In above printf
//ptr[0] will give me S
//ptr[0] >=65 && ptr[0]<=90 i.e ascii value of S >= 65 && S<=90 that comes out to be true
//control comes to ? =>
//ptr[strlen(ptr)-1]+32
//strlen(ptr) => strlen(Sunbeam IT PARK)(ptr is pointing to Sunbeam IT PARK)
//length comes out to be => 15

//ptr[15-1]+32
//ptr[14]+32
//ptr   ==============> Sunbeam IT PARK
//ptr[14] => character at ptr[14] is K
//ptr[14] + 32 => 'K' + 32 => comes out to be 'k'

// o/p is 'k'

free(ptr); // memory is freed
ptr=NULL;// to avoid dangling pointer
return 0;
}

*/

//****************************************************************
/*
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main ( void )
{
char *title=NULL;
title = (char *) malloc(20);
//allocates 20 bytes on heap section

strcpy(title, "C Programming");
//copy string C Programming inside dynamically allocated block

printf("String = %c", *title);//prints the character C

free(title); // free the dynamically allocated block to avoid memory leakage

title=0; // NOT OK (runtime error )
// it should be title = NULL

//as runtime error abnormal termination on above line
//following code never executes
strcpy(title, "C++ Programming");
printf(" %s", title);
return 0;
}
A. String = C Programming
B. Complile time error
C. String = C C++ Programming
D. Run time error
Answer: D

*/
//********************************************************

/*

#include <stdio.h>
#define value 10  //A macro value is defined with the value 10.
void fun();
int main(void)
{
    fun(); // function is called
    return 0;
}
void fun()
{
#ifndef value //checks whether the macro value is defined using #ifndef(if not defined)
#undef value //If value is not defined, it undefines value and redefines it as 100.
#define value 100 //redefines value 100
#else
#undef value //undef means undefined value i.e undefines the value 10
#define value 200 // defines the new value 200
#endif
#define Value 300 //defines the value 300
    printf("Value : %d", value); //value printed here is 200
    //#define value 200 this statement defines value to 200 overwriting previous 10
    return;
}

A. Value : 100
B. Value : 200
C. no output
D. Compile time error
E. Value : 300
Answer: B

*/

/*

#include <stdio.h>
#define SWAP(a, b) \
    {              \
        b ^= b;    \
        a ^= a;    \
        b ^= b;    \
    }
int main(void)
{
    int x = 10;
    int y = 20;
    x = x * y;
    y = x / y;
    x = x / y;
    SWAP(x, y); // replaced as 
    
    // { 
    //     EX-OR operator 

    //     y ^= y; 
    //     x ^= x; 
    //     y ^= y; 
    // };
    
    x = x + y;
    y = x - y;
    x = x - y;
    printf("X=%d,Y=%d", x, y);
    return 0;
}
A.X = 0, Y = 0 
B.X = 10, Y = 20 
C.X = 20, Y = 10 
D.Compile time error 
E.X = 10, Y = 10 
Answer : A

*/ 