#include <stdio.h>
#include <string.h>
struct test
{
char name[20];
};
int main(void)
{
struct test s1;
strcpy( s1.name,"SunBeam");
//printf("%s",*(&s1.name)); //OK  (*(&s1.name) is equivalent to s1.name in C because the & operator takes the address, and the * operator dereferences it, 
				    effectively canceling each other out in this context.)
//printf("%s",s1.name);// OK 
//printf("%s",(&s1));// OK (&s1 is the address of the name array inside the structure s1. The name array is a character array (string), and &s1 points to its first element. ) 
//printf("%s",s1);// NOT OK (s1 is the entire structure, not a pointer to a null-terminated string.) 
//printf("%s",*(&s1));//NOT OK

return 0;
}
*********************************************************************************************

// #include <stdio.h>
// struct
// {
// char *name;
// }symtab={"SunBeam"};

// int main()
// {
//     //printf("%c]\n", symtab.(&name[0])); // NOT OK 
//     //printf("%c\n", *symtab.name);//  OK 
//     //printf("%c\n", symtab.name[0]); // OK 
//     //printf("%c", *symtab.name[0]); // NOT OK 
//     //printf("%s\n", symtab.name); // NOT OK 


//     return 0;
// }
/* 
#include<stdio.h>
struct s
{
int i;
struct s obj; // NOT OK 
}s1;
int main(void)
{
s1.i = 100;
s1.obj = s1; 
printf("%d %d",s1.obj.i, s1);
return 0;
}
A. 100 100
B. Garbage value Garbage value
C. Compiler error
D. Run time error
E. Garbage value 100
Answer: C


// if you want to use s1.obj = s1; 
// instead use pointer 
// i.e self referential pointer 
struct s
{
int i;
struct s *obj;  // OK 
}s1;

*/ 

//*****************************************************************
/*




#include<stdio.h>
struct emp
{ int empno;
char name[10];
float sal;
}; struct emp e1;
void accept_emp_info(struct emp *e);
int main(void)
{
struct emp e1;
struct emp *temp=&e1;
printf("\n Enter employee infomation = \n");
accept_emp_info(temp);
printf("\n EmpNo Name Sal\n");
printf("%-8d%-10s%-6.2f\n", e1.empno, e1.name, e1.sal);
printf("%-8d%-10s%-6.2f\n", (*temp).empno, (*temp).name, 
 (*temp).sal);
return 0;
}
void accept_emp_info(struct emp *e)
{
printf("\n Enter Emp No=");
scanf("%d", &e->empno);
printf("\n Enter Emp Name=");
scanf("%s", e->name);
printf("\n Enter Emp sal=");
scanf("%f", &e->sal);
return ;
}

// IT will print the values 
// we are using call by address concept here 
// no need to return anything 
// will print the values 


what will be the output of program if we give this input?
empno=101 , name ="abcd" , sal=10000.
A. 101 abcd 10000.00 101 abcd 10000.00
B. 0 NULL 0.000000 0 NULL 0.000000
C. Garbage Values Garbage Values
D. 0 0 0.00 0 0 0.00
E. Error
Answer: A

*/ 

//*****************************************************
